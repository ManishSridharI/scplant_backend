"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

from celery.schedules import crontab


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'df67hx2a(@h9ee(^+5nw$n=m=c0sbl*nc%&77%w())!pyfvek_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'digbio-devel.missouri.edu',
    'digbio-g2pdeep.rnet.missouri.edu',
    'scplant-frontend-web',
    'scplant-frontend-app',
    'scplant-server',
    'scplantannotate.missouri.edu',
]

HOST_URL = 'https://scplantannotate.missouri.edu/'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django_celery_results',
    'accounts',
    'organisms',
    'predictors',
    'h5addatasets',
    'rdsdatasets',
    'tenxfeaturebcmatrixdatasets',
    'preddatasets',
    'scripts',
    'jobs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:5049",
    "http://127.0.0.1:5349",
    "http://digbio-g2pdeep.rnet.missouri.edu:5049",
    "http://scplant-frontend-web:5049",
    "http://digbio-g2pdeep.rnet.missouri.edu:5349",
    "http://scplant-frontend-app:5349",
    "https://127.0.0.1:5049",
    "https://127.0.0.1:5349",
    "https://digbio-g2pdeep.rnet.missouri.edu:5049",
    "https://scplant-frontend-web:5049",
    "https://digbio-g2pdeep.rnet.missouri.edu:5349",
    "https://scplant-frontend-app:5349",
    "https://scplantannotate.missouri.edu",
    "http://scplant-server:8000",
    "http://scplant-server:8449",
]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5049",
    "http://127.0.0.1:5349",
    "http://digbio-g2pdeep.rnet.missouri.edu:5049",
    "http://scplant-frontend-web:5049",
    "http://digbio-g2pdeep.rnet.missouri.edu:5349",
    "http://scplant-frontend-app:5349",
    "https://127.0.0.1:5049",
    "https://127.0.0.1:5349",
    "https://digbio-g2pdeep.rnet.missouri.edu:5049",
    "https://scplant-frontend-web:5049",
    "https://digbio-g2pdeep.rnet.missouri.edu:5349",
    "https://scplant-frontend-app:5349",
    "https://scplantannotate.missouri.edu",
    "http://scplant-server:8000",
    "http://scplant-server:8449",
]

CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# REST Framework configuration

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    # Use Django's standard `django.contrib.auth` permissions or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('MYSQL_DB', 'db'),
        'USER': os.environ.get('MYSQL_USER', 'root'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', 'root'),
        'HOST': os.environ.get('MYSQL_HOST', '127.0.0.1'),
        'PORT': os.environ.get('MYSQL_PORT', '3306'),
    }
}


# Custom authentication model

AUTH_USER_MODEL = 'accounts.CustomUserModel'


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# File upload settings

FILE_UPLOAD_MAX_MEMORY_SIZE = 1048576000
FILE_UPLOAD_TEMP_DIR = os.path.join(BASE_DIR, "temporary")


# Data upload settings

DATA_UPLOAD_MAX_MEMORY_SIZE = 1048576000


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

# STATIC_URL = '/static/'

MEDIA_URL = 'uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "*", "static")
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Celery backend with RabbitMQ support

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "amqp://guest:guest@rabbitmq:5672/")
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_TRACK_STARTED = True
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_DEFAULT_QUEUE = 'scplantqueue'

CELERY_BEAT_SCHEDULE = {
    "remove_annotate_and_plot_task_records": {
        "task": "jobs.tasks.AnnotateAndPlotTask.RemoveAnnotateAndPlotTaskRecords",
        # "schedule": crontab(minute="*"),
        "schedule": crontab(hour=0, minute=0),
    },
    "remove_treatment_vs_control_task_records": {
        "task": "jobs.tasks.TreatmentVsControlTask.RemoveTreatmentVsControlTaskRecords",
        # "schedule": crontab(minute="*"),
        "schedule": crontab(hour=0, minute=0),
    },
    "remove_convert_rds_to_h5ad_task_records": {
        "task": "jobs.tasks.ConvertRdsToH5adTask.RemoveConvertRdsToH5adTaskRecords",
        # "schedule": crontab(minute="*"),
        "schedule": crontab(hour=0, minute=0),
    }
}
